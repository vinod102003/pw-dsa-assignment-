1)int sum = 0;

for(int i = 1; i <= n; i++) {

 for(int j = 1; j <= i; j++) {

 sum++;

 }

}

Solution :

The time complexity of this code is O(n^2) as it uses nested loops, where the outer loop runs n times and the inner 
loop runs i times where i varies from 1 to n.


The total number of operations performed can be calculated by summing the total number of operations in each 
iteration of the outer loop. The inner loop will run i times on the i-th iteration of the outer loop. So the number of 
operations is (1+2+3+...+n) which is n(n+1)/2, which is O(n^2).


One way to improve the time complexity of this code is to use a mathematical formula to find the sum instead of 
using nested loops


2) given T(n) = 3T(n-1) + 12n


Substituting the values in the relation:

T(1) = 3T(0) + 12

=> T(1) = 15 + 12 = 27

T(2) = 3T(1) + 12 * 2

=>T(2) = 3 * 27 + 24 = 81 + 24

Hence T(2) = 105.



3) : Let the solution be T(n) = O(n), now let’s prove this using the induction method.


For that to happen T(n) <= cn where c is some constant.

T(n) = T(n - 1) + c

T(n - 1) = T(n - 2) + c

T(n - 2) = T(n - 3) + c

|

|

T(2) = T(1) + c

—------------------------ Adding all above equations

T(n) = T(1) + cn

Let us assume T(1) to be a constant value.

T(n) = k + cn

Therefore, T(n) <= cn

Hence we can conclude T(n) = O(n)




4)T(n) = 16T(n/4) + n2logn

Solution: Fromthegivenrecurrencerelationwecanobtainthevalueofdifferentparameterssuchasa,b,p,and
k.

Therelation:T(n)=16T(n/4)+n2logn

Here,a=16

b=4

k=2

p=1

bk=42=16

Herea=bk

Alsop>-1

HenceT(n)=θ(nlogab*logp+1n)

ThereforeT(n)=θ(nlog164*log1+1n)=θ(n1/2log2n)






5)
T(n) = 2T(n/2) + n
cost of level 0 = n
cost of level 1 = n/2+n/2 = n
cost of level 2 = n/4+n/4+n/4+n/4 = n


	
level 0 = n

level 1 = n/2 + n/2 = n

level 2 = n/2^2 + n/2^2 + n/2^2 + n/2^2 = n

level k = n/2^k

base value = 1

n/2^k = 1


n = 2^k

k = log2n

t(n)= n+n+n+------+0(n)

time-complexity = 0(nlog2n)




6)
. Calculating height of tree

As we know that (n/2^k) =1

n = 2^K

Taking log both sides

log(n) = log(2^k)

log(n) = klog(2)

k = log(n)/log(2)

k = log2(n)

Height of tree is log(n) base 2

Let's put the values into the formulae,

T(n) = K + 2*K + 4*K + .... + log(n)` times + `O(1) * n

T(n) = K(1 + 2 + 4 + .... + log(n) times)` + `O(n)

T(n) = K(2^0 + 2^1 + 2^2 + ....+ log(n) times + O(n)


In the GP formed above, a = 1 and r = 2, after solving this we get, T(n) = K * (1 / (2 - 1)) + O(n)

T(n) = K + O(n)

T(n) = O(n)















